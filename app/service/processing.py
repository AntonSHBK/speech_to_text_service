import ffmpeg
import torchaudio
import torchaudio.transforms as transforms
import soundfile as sf
import torch
import os
from pathlib import Path


class AudioProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π."""

    @staticmethod
    def extract_audio(video_path: str, output_audio_path: str, sample_rate: int = 16000):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ WAV —Å 16 kHz.

        Args:
            video_path (str): –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É.
            output_audio_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ.
            sample_rate (int, optional): –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 16 kHz.

        Returns:
            str: –ü—É—Ç—å –∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
        """
        print(f"üé• –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ: {video_path}")

        try:
            (
                ffmpeg
                .input(video_path)
                .output(output_audio_path, format="wav", ar=sample_rate, ac=1)
                .run(overwrite_output=True, quiet=True)
            )
            print(f"‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {output_audio_path}")
            return output_audio_path
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")

    @staticmethod
    def load_audio_file(audio_path: str, target_sample_rate: int = 16000):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ 16 kHz WAV –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: WAV, MP3, FLAC, OGG, AAC, M4A.

        Args:
            audio_path (str): –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
            target_sample_rate (int): –¶–µ–ª–µ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏.

        Returns:
            torch.Tensor: –ê—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (1, N).
            int: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (–æ–±—ã—á–Ω–æ 16000).
        """
        audio_path = Path(audio_path)

        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ WAV, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        if audio_path.suffix.lower() not in [".wav"]:
            print(f"‚ö† –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {audio_path.suffix} –≤ WAV...")
            temp_wav_path = audio_path.with_suffix(".wav")

            try:
                (
                    ffmpeg
                    .input(str(audio_path))
                    .output(str(temp_wav_path), format="wav", ar=target_sample_rate, ac=1)
                    .run(overwrite_output=True, quiet=True)
                )
                audio_path = temp_wav_path
            except Exception as e:
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {audio_path}: {e}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —á–µ—Ä–µ–∑ torchaudio
        try:
            audio, sample_rate = torchaudio.load(str(audio_path))
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")

        # –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å 16 kHz, —Ä–µ—Å–µ–º–ø–ª–∏—Ä—É–µ–º
        if sample_rate != target_sample_rate:
            resampler = transforms.Resample(orig_freq=sample_rate, new_freq=target_sample_rate)
            audio = resampler(audio)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–µ—Ä–µ–æ –≤ –º–æ–Ω–æ
        if audio.shape[0] > 1:
            audio = audio.mean(dim=0, keepdim=True)

        return audio.to(torch.float32), target_sample_rate

    @staticmethod
    def save_audio(audio_tensor: torch.Tensor, output_path: str, sample_rate: int = 16000):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –≤ WAV-—Ñ–∞–π–ª.

        Args:
            audio_tensor (torch.Tensor): –ê—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (1, N).
            output_path (str): –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
            sample_rate (int, optional): –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 16 kHz).
        """
        output_path = Path(output_path)
        sf.write(output_path, audio_tensor.squeeze(0).numpy(), sample_rate)
        print(f"üìÅ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
